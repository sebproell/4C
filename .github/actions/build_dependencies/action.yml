name: Build 4C dependencies
description: Build Ubuntu image with all 4C dependencies
inputs:
  docker-file:
    description: Path to the Dockerfile
    required: true
  registry:
    description: Docker registry to push the image to
    required: true
  username:
    description: Username to log in to the Docker registry
    required: true
  password:
    description: Password to log in to the Docker registry
    required: true
  image-name:
    description: Name of the image to build
    required: true
  dependencies-hash:
    description: Hash of the dependencies
    required: true
  ubuntu-version:
    description: Version of Ubuntu to use
    required: true
runs:
  using: composite
  steps:
    - name: Log in to the Container registry
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}
    # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
      with:
        images: ${{ inputs.image-name }}
        labels: |
          org.opencontainers.image.description=Image containing all the dependencies required for building and testing 4C
    # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
    # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
    # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6.9.0
      with:
        context: .
        file: ${{ inputs.docker-file }}
        build-args: |
          DEPENDENCIES_HASH=${{ inputs.dependencies-hash }}
          UBUNTU_VERSION=${{ inputs.ubuntu-version }}
        push: true
        tags: ${{ inputs.image-name }}:${{ inputs.dependencies-hash }}
        # tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)."
    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@ef244123eb79f2f7a7e75d99086184180e6d0018 # v1.1.4
      with:
        subject-name: ${{ inputs.image-name }}
        subject-digest: ${{ steps.push.outputs.digest }}
        push-to-registry: true
